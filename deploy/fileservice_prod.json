{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Auto Generated -- fileservice",
  "Parameters": {
    "SecretStashUsername": {
      "Type": "String",
      "Description": "A username for Secret Stash"
    },
    "SecretStashPassword": {
      "NoEcho": "true",
      "Type": "String",
      "Description": "A password for Secret Stash"
    },
    "SecretStashURL": {
      "Default": "ec2-54-164-123-229.compute-1.amazonaws.com",
      "Type": "String",
      "Description": "A url for Secret Stash"
    },
    "SecretStashGroups": {
      "Default": "build",
      "Type": "String",
      "Description": "Groups for secretstash"
    }
  },
  "Resources": {
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "HTTPS:443/ht/",
          "Timeout": "15",
          "UnhealthyThreshold": "3"
        },
        "Listeners": [
          {
            "InstancePort": "443",
            "Protocol": "HTTPS",
            "InstanceProtocol": "HTTPS",
            "LoadBalancerPort": "443",
            "PolicyNames": [],
            "SSLCertificateId": "arn:aws:iam::646975045128:server-certificate/fileserviceprod"
          }
        ],
        "AvailabilityZones": [
          "us-east-1a",
          "us-east-1c",
          "us-east-1d"
        ],
        "Tags": [
          {
            "Value": "production",
            "Key": "environment"
          },
          {
            "Value": "fileservice",
            "Key": "stackname"
          },
          {
            "Value": "fileservice",
            "Key": "Name"
          },
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "CFStackName"
          }
        ]
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "allow traffic from our app servers to the load balancer"
      }
    },
    "ELBSecurityGroupIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "80",
        "GroupName": {
          "Ref": "ELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": {
          "Fn::GetAtt": [
            "LoadBalancer",
            "SourceSecurityGroup.OwnerAlias"
          ]
        },
        "SourceSecurityGroupName": {
          "Fn::GetAtt": [
            "LoadBalancer",
            "SourceSecurityGroup.GroupName"
          ]
        },
        "ToPort": "80",
        "IpProtocol": "tcp"
      }
    },
    "ELBSecurityGroupIngressHTTPS": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "443",
        "GroupName": {
          "Ref": "ELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": {
          "Fn::GetAtt": [
            "LoadBalancer",
            "SourceSecurityGroup.OwnerAlias"
          ]
        },
        "SourceSecurityGroupName": {
          "Fn::GetAtt": [
            "LoadBalancer",
            "SourceSecurityGroup.GroupName"
          ]
        },
        "ToPort": "443",
        "IpProtocol": "tcp"
      }
    },
    "SSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": {
          "ToPort": "22",
          "IpProtocol": "tcp",
          "FromPort": "22",
          "CidrIp": "0.0.0.0/0"
        },
        "GroupDescription": "allows inbound SSH from all"
      }
    },
    "PublicHTTTPSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": {
          "ToPort": "443",
          "IpProtocol": "tcp",
          "FromPort": "443",
          "CidrIp": "0.0.0.0/0"
        },
        "GroupDescription": "allows inbound HTTPS from all"
      }
    },
    "AppServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": 1,
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Value": "fileservice",
            "Key": "Name"
          }
        ],
        "MaxSize": 4,
        "HealthCheckGracePeriod": 300,
        "DesiredCapacity": 2,
        "LaunchConfigurationName": {
          "Ref": "TheComputeLaunch"
        },
        "AvailabilityZones": [
          "us-east-1a",
          "us-east-1c",
          "us-east-1d"
        ],
        "LoadBalancerNames": [
          {
            "Ref": "LoadBalancer"
          }
        ],
        "HealthCheckType": "ELB"
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "false",
          "MaxBatchSize": "1",
          "MinInstancesInService": "1"
        }
      }
    },
    "TheComputeLaunch": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "touch /var/log/user-data.log\n",
                "chmod 0640 /var/log/user-data.log\n",
                "chown root:syslog /var/log/user-data.log\n",
                "exec > /var/log/user-data.log 2>&1\n",
                "echo BEGIN\n",
                "date '+%Y-%m-%d %H:%M:%S'\n",
                "IFS=','\n",
                "USERGROUPS=\"",
                {
                  "Ref": "SecretStashGroups"
                },
                "\"\n",
                "set -e -x\n",
                "sudo mkdir /etc/chef\n",
                "sudo rm -fR /var/lib/apt/lists/*\n",
                "sudo apt-get update 2> /dev/null\n",
                "sudo apt-get -y install build-essential 2> /dev/null\n",
                "sudo apt-get -y install libmysqlclient-dev python-setuptools python-dev python-docutils 2> /dev/null\n",
                "sudo apt-get -y install git 2> /dev/null\n",
                "sudo apt-get -y install curl 2> /dev/null\n",
                "sudo apt-get -y install language-pack-en 2> /dev/null\n",
                "sudo apt-get -y install libxml2-dev 2> /dev/null\n",
                "sudo apt-get -y install libxslt-dev 2> /dev/null\n",
                "sudo apt-get -y install libpq-dev libffi-dev 2> /dev/null\n",
                "export DEBIAN_FRONTEND=noninteractive\n",
                "DEBIAN_FRONTEND=noninteractive sudo apt-get -y upgrade 2> /dev/null\n",
                "sudo wget http://stedolan.github.io/jq/download/linux64/jq\n",
                "sudo mv jq /usr/bin/jq\n",
                "sudo chmod +x /usr/bin/jq\n",
                "instanceid=`curl http://169.254.169.254/latest/meta-data/instance-id`\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cfn-init --region ",
                {
                  "Ref": "AWS::Region"
                },
                "    -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r TheComputeLaunch\n",
                "curl -k -X POST -H \"Accept: application/json;indent=4\" -H \"Content-Type:application/json\" -u \"",
                {
                  "Ref": "SecretStashUsername"
                },
                ":",
                {
                  "Ref": "SecretStashPassword"
                },
                "\" \"https://",
                {
                  "Ref": "SecretStashURL"
                },
                "/secrets/api/host/\" -d '{\"name\":\"'\"$instanceid\"'\"}' | jq -r .apikey.key > /root/secretstash.txt\n",
                "for val in $USERGROUPS; do curl -k -X PUT -H \"Accept: application/json;indent=4\" -H \"Content-Type:application/json\" -u \"",
                {
                  "Ref": "SecretStashUsername"
                },
                ":",
                {
                  "Ref": "SecretStashPassword"
                },
                "\" -d '{\"groups\":[\"'\"$val\"'\"],\"action\":\"add\"}' \"https://",
                {
                  "Ref": "SecretStashURL"
                },
                "/secrets/usergroup/$instanceid/\"; done\nTOKEN=`cat /root/secretstash.txt`\n",
                "curl -k -X GET -H \"Authorization: Token $TOKEN\" -H \"Accept: application/json;indent=4\"  \"https://",
                {
                  "Ref": "SecretStashURL"
                },
                "/secrets/api/secret/10/\" | jq -r .content > /root/github.txt \ncurl -L http://www.opscode.com/chef/install.sh | bash -s \n",
                "export PATH=/opt/chef/embedded/bin:$PATH\n",
                "/opt/chef/embedded/bin/gem install aws-sdk --no-rdoc --no-ri\n",
                "/opt/chef/embedded/bin/gem install right_aws --no-rdoc --no-ri\n",
                "/opt/chef/embedded/bin/gem install librarian-chef --no-rdoc --no-ri\n",
                "/opt/chef/embedded/bin/gem install rest-client --no-rdoc --no-ri\n",
                "export HOME=/root\n",
                "GITHUB=`cat /root/github.txt`\n",
                "git clone https://dbmibot:$GITHUB@github.com/hms-dbmi/chef.git --branch=develop /var/chef-repo \n",
                "mkdir -p /var/chef\n",
                "mkdir -p /var/chef-solo\n",
                "cd /var/chef-repo\n",
                "/opt/chef/embedded/bin/librarian-chef update  \n",
                "/opt/chef/embedded/bin/librarian-chef install \n",
                "cd /var/chef\n",
                "/opt/chef/bin/chef-solo -l debug \n",
                "exit 0\n"
              ]
            ]
          }
        },
        "ImageId": "ami-1c323274",
        "KeyName": "udnprod",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdb",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdc",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdd",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvde",
            "VirtualName": "ephemeral3"
          }
        ],
        "SecurityGroups": [
          "fileserviceprod",
          {
            "Ref": "ELBSecurityGroup"
          },
          {
            "Ref": "SSHSecurityGroup"
          }
        ],
        "InstanceType": "t2.medium"
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/chef/node.json": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n  \"environment\": \"production\", \n",
                      "\"secretstash\": \"",
                      {
                        "Ref": "SecretStashURL"
                      },
                      "\", \n",
                      "\"cloud\": {\"type\":\"aws\"}, \n",
                      "  \"run_list\": [\n    \"role[fileservice]\"\n  ]\n}"
                    ]
                  ]
                },
                "owner": "root",
                "group": "root",
                "mode": "000600"
              },
              "/etc/chef/solo.rb": {
                "content": "log_level       :info\nlog_location    STDOUT\nfile_cache_path \"/var/chef-solo\"\ncookbook_path   [\"/var/chef-repo/site-cookbooks\", \"/var/chef-repo/cookbooks\"]\nrole_path       \"/var/chef-repo/roles\"\njson_attribs    \"/etc/chef/node.json\"\n",
                "owner": "root",
                "group": "root",
                "mode": "000644"
              }
            },
            "commands": {},
            "users": {},
            "sources": {},
            "groups": {},
            "services": {},
            "packages": {}
          }
        }
      }
    },
    "AppServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "ScalingAdjustment": "1",
        "Cooldown": "600",
        "AutoScalingGroupName": {
          "Ref": "AppServerAutoScalingGroup"
        },
        "AdjustmentType": "ChangeInCapacity"
      }
    },
    "AppServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "ScalingAdjustment": "-1",
        "Cooldown": "600",
        "AutoScalingGroupName": {
          "Ref": "AppServerAutoScalingGroup"
        },
        "AdjustmentType": "ChangeInCapacity"
      }
    },
    "AppServerCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AppServerAutoScalingGroup"
            }
          }
        ],
        "Namespace": "AWS/EC2",
        "ActionsEnabled": true,
        "MetricName": "CPUUtilization",
        "EvaluationPeriods": "5",
        "AlarmActions": [
          {
            "Ref": "AppServerScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Scale up if average CPU usage of the AppServers stays above 75% for at least 5 minutes",
        "Period": "60",
        "ComparisonOperator": "GreaterThanThreshold",
        "Statistic": "Average",
        "Threshold": "75",
        "Unit": "Percent"
      }
    },
    "AppServerCPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AppServerAutoScalingGroup"
            }
          }
        ],
        "Namespace": "AWS/EC2",
        "ActionsEnabled": true,
        "MetricName": "CPUUtilization",
        "EvaluationPeriods": "5",
        "AlarmActions": [
          {
            "Ref": "AppServerScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Scale down if average CPU usage of the AppServers stays below 25% for at least 5 minutes",
        "Period": "60",
        "ComparisonOperator": "LessThanThreshold",
        "Statistic": "Average",
        "Threshold": "25",
        "Unit": "Percent"
      }
    }
  },
  "Outputs": {
    "LoadBalancerEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancer",
          "DNSName"
        ]
      }
    }
  }
}